{
  "address": "0xE4c3c91De9Eb9b92CedeE9ddB1e4d3388318151c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "DollarStoreKidsBurnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "DollarStoreKidsMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "mintStatus",
          "type": "bool"
        }
      ],
      "name": "MintToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CAPSULE_FACTORY",
      "outputs": [
        {
          "internalType": "contract ICapsuleFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CAPSULE_MINTER",
      "outputs": [
        {
          "internalType": "contract ICapsuleMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DSK",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PER_ADDRESS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "alreadyMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capsuleCollection",
      "outputs": [
        {
          "internalType": "contract ICapsule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMintEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "transferCollectionOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "updateBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metamaster_",
          "type": "address"
        }
      ],
      "name": "updateMetamaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "royaltyReceiver_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyRate_",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12570b6173e817888122fc194bce3dbddd0ef0363e5793d0a125ea3cb4b96092",
  "receipt": {
    "to": null,
    "from": "0x53a50ac9Bb98dFd61d4031390ebecC4e2bD7f9b1",
    "contractAddress": "0xE4c3c91De9Eb9b92CedeE9ddB1e4d3388318151c",
    "transactionIndex": 17,
    "gasUsed": "4787914",
    "logsBloom": "0x
    "blockHash": "0x52ee1e838308d1f7ffd02beeccb3a698fdc9a9e83f2212a81d9ce3ac00a6cdd4",
    "transactionHash": "0x12570b6173e817888122fc194bce3dbddd0ef0363e5793d0a125ea3cb4b96092",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 15436175,
        "transactionHash": "0x12570b6173e817888122fc194bce3dbddd0ef0363e5793d0a125ea3cb4b96092",
        "address": "0xE4c3c91De9Eb9b92CedeE9ddB1e4d3388318151c",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000053a50ac9bb98dfd61d4031390ebecc4e2bd7f9b1"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0x52ee1e838308d1f7ffd02beeccb3a698fdc9a9e83f2212a81d9ce3ac00a6cdd4"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 15436175,
        "transactionHash": "0x12570b6173e817888122fc194bce3dbddd0ef0363e5793d0a125ea3cb4b96092",
        "address": "0xC67F5E3a5B697AE004Edd8F84925189a81c6DC4b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ced59c19f1f3a9eebd670f746b737acf504d1eb"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x52ee1e838308d1f7ffd02beeccb3a698fdc9a9e83f2212a81d9ce3ac00a6cdd4"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 15436175,
        "transactionHash": "0x12570b6173e817888122fc194bce3dbddd0ef0363e5793d0a125ea3cb4b96092",
        "address": "0x4Ced59c19F1f3a9EeBD670f746B737ACf504d1eB",
        "topics": [
          "0xcee215ce2d19ba26b006301c8a1573e155d6bb971370af5d258e3531e121cf65",
          "0x000000000000000000000000e4c3c91de9eb9b92cedee9ddb1e4d3388318151c",
          "0x000000000000000000000000c67f5e3a5b697ae004edd8f84925189a81c6dc4b"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0x52ee1e838308d1f7ffd02beeccb3a698fdc9a9e83f2212a81d9ce3ac00a6cdd4"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 15436175,
        "transactionHash": "0x12570b6173e817888122fc194bce3dbddd0ef0363e5793d0a125ea3cb4b96092",
        "address": "0xC67F5E3a5B697AE004Edd8F84925189a81c6DC4b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004ced59c19f1f3a9eebd670f746b737acf504d1eb",
          "0x000000000000000000000000e4c3c91de9eb9b92cedee9ddb1e4d3388318151c"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x52ee1e838308d1f7ffd02beeccb3a698fdc9a9e83f2212a81d9ce3ac00a6cdd4"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 15436175,
        "transactionHash": "0x12570b6173e817888122fc194bce3dbddd0ef0363e5793d0a125ea3cb4b96092",
        "address": "0xC67F5E3a5B697AE004Edd8F84925189a81c6DC4b",
        "topics": [
          "0x309b29ded109b9e28fb9885757b3e0096eb75c51d23aa4635d68bcd569f6adc1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 41,
        "blockHash": "0x52ee1e838308d1f7ffd02beeccb3a698fdc9a9e83f2212a81d9ce3ac00a6cdd4"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 15436175,
        "transactionHash": "0x12570b6173e817888122fc194bce3dbddd0ef0363e5793d0a125ea3cb4b96092",
        "address": "0xC67F5E3a5B697AE004Edd8F84925189a81c6DC4b",
        "topics": [
          "0x3f799f7ba92b1df8f47fee2cde8743f926d8dc3c0b8217e52ece2b3a7c1a6967"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000d05",
        "logIndex": 42,
        "blockHash": "0x52ee1e838308d1f7ffd02beeccb3a698fdc9a9e83f2212a81d9ce3ac00a6cdd4"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 15436175,
        "transactionHash": "0x12570b6173e817888122fc194bce3dbddd0ef0363e5793d0a125ea3cb4b96092",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e4c3c91de9eb9b92cedee9ddb1e4d3388318151c",
          "0x000000000000000000000000b8cf4a28da322598fdb78a1406a61b72d6f6b396"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000c6a98b40",
        "logIndex": 43,
        "blockHash": "0x52ee1e838308d1f7ffd02beeccb3a698fdc9a9e83f2212a81d9ce3ac00a6cdd4"
      }
    ],
    "blockNumber": 15436175,
    "cumulativeGasUsed": "6551737",
    "status": 1,
    "byzantium": true
  },
  "args": [
    ""
  ],
  "numDeployments": 1,
  "solcInputHash": "2dac645098ac493b1f663ab4c1d8aaab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DollarStoreKidsBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DollarStoreKidsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintStatus\",\"type\":\"bool\"}],\"name\":\"MintToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAPSULE_FACTORY\",\"outputs\":[{\"internalType\":\"contract ICapsuleFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAPSULE_MINTER\",\"outputs\":[{\"internalType\":\"contract ICapsuleMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DSK\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PER_ADDRESS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capsuleCollection\",\"outputs\":[{\"internalType\":\"contract ICapsule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferCollectionOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metamaster_\",\"type\":\"address\"}],\"name\":\"updateMetamaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyReceiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyRate_\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"burn(uint256)\":{\"params\":{\"id_\":\"DSK id to burn\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"This function enables this contract to receive ERC721 tokens\"},\"transferCollectionOwnership(address)\":{\"params\":{\"newOwner_\":\"Address of new owner\"}},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current governor.\"},\"updateBaseURI(string)\":{\"params\":{\"baseURI_\":\"New baseURI string\"}},\"updateMetamaster(address)\":{\"params\":{\"metamaster_\":\"Address of new metamaster\"}},\"updateRoyaltyConfig(address,uint256)\":{\"params\":{\"royaltyRate_\":\"Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%\",\"royaltyReceiver_\":\"Address of royalty receiver\"}}},\"title\":\"Dollar Store Kids\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAX_DSK()\":{\"notice\":\"Max amount of Dollar Store Kids to release\"},\"MINT_PER_ADDRESS()\":{\"notice\":\"Allowed Dollar Store Kids mints per address\"},\"USDC()\":{\"notice\":\"Input token for the Dollar Store Kids\"},\"alreadyMinted(address)\":{\"notice\":\"Mapping of addresses who have minted.\"},\"burn(uint256)\":{\"notice\":\"Burn a DSK and get 1 USDC back\"},\"capsuleCollection()\":{\"notice\":\"Dollar Store Kids collection\"},\"isMintEnabled()\":{\"notice\":\"Flag indicating whether the Dollar Store Kids mint is enabled.\"},\"mint()\":{\"notice\":\"Mint a DSK to caller address\"},\"sweep(address)\":{\"notice\":\"onlyGovernor:: Sweep given token to governor address\"},\"toggleMint()\":{\"notice\":\"onlyGovernor:: Toggle minting status of the Dollar Store Kids\"},\"transferCollectionOwnership(address)\":{\"notice\":\"onlyGovernor:: Transfer ownership of the Dollar Store Kids Capsule collection\"},\"updateBaseURI(string)\":{\"notice\":\"onlyGovernor:: Set the collection baseURI\"},\"updateMetamaster(address)\":{\"notice\":\"onlyGovernor:: Transfer metamaster of the Dollar Store Kids Capsule collection\"},\"updateRoyaltyConfig(address,uint256)\":{\"notice\":\"onlyGovernor:: Update royalty receiver and rate in Dollar Store Kids collection\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DollarStoreKids.sol\":\"DollarStoreKids\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DollarStoreKids.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./access/Governable.sol\\\";\\nimport \\\"./interfaces/ICapsule.sol\\\";\\nimport \\\"./interfaces/ICapsuleFactory.sol\\\";\\nimport \\\"./interfaces/ICapsuleMinter.sol\\\";\\n\\n/// @title Dollar Store Kids\\ncontract DollarStoreKids is Governable, IERC721Receiver {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Input token for the Dollar Store Kids\\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    ICapsuleFactory public constant CAPSULE_FACTORY = ICapsuleFactory(0x4Ced59c19F1f3a9EeBD670f746B737ACf504d1eB);\\n    ICapsuleMinter public constant CAPSULE_MINTER = ICapsuleMinter(0xb8Cf4A28DA322598FDB78a1406a61B72d6F6b396);\\n    /// @notice Allowed Dollar Store Kids mints per address\\n    uint8 public constant MINT_PER_ADDRESS = 1;\\n    /// @notice Max amount of Dollar Store Kids to release\\n    uint16 public constant MAX_DSK = 3333;\\n\\n    /// @notice Dollar Store Kids collection\\n    ICapsule public immutable capsuleCollection;\\n    /// @notice Flag indicating whether the Dollar Store Kids mint is enabled.\\n    bool public isMintEnabled;\\n    /// @notice Mapping of addresses who have minted.\\n    mapping(address => bool) public alreadyMinted;\\n\\n    uint256 private constant ONE_DOLLAR = 1e6; // 1 USDC\\n\\n    event DollarStoreKidsMinted(address indexed user, uint256 indexed id);\\n    event DollarStoreKidsBurnt(address indexed user, uint256 indexed id);\\n    event MintToggled(bool mintStatus);\\n\\n    constructor(string memory baseURI_) payable {\\n        capsuleCollection = ICapsule(\\n            CAPSULE_FACTORY.createCapsuleCollection{value: msg.value}(\\\"Dollar Store Kids\\\", \\\"D$K\\\", address(this), true)\\n        );\\n        updateBaseURI(baseURI_);\\n        capsuleCollection.lockCollectionCount(MAX_DSK);\\n        // Using approve as USDC is ERC20 compliant token\\n        IERC20(USDC).approve(address(CAPSULE_MINTER), MAX_DSK * ONE_DOLLAR);\\n    }\\n\\n    /// @notice Mint a DSK to caller address\\n    function mint() external payable {\\n        require(isMintEnabled, \\\"mint-is-not-enabled\\\");\\n        address _caller = _msgSender();\\n        require(!alreadyMinted[_caller], \\\"already-minted-dsk\\\");\\n\\n        uint256 _counter = capsuleCollection.counter();\\n        require(_counter < MAX_DSK, \\\"max-supply-reached\\\");\\n        // Each address is allowed to mint a max of 1 DSK - update state\\n        alreadyMinted[_caller] = true;\\n\\n        // DSK collection will be using baseURL and do not need URI for individual NFTs.\\n        // Hence passing empty token URI to mint function below.\\n        CAPSULE_MINTER.mintSingleERC20Capsule{value: msg.value}(\\n            address(capsuleCollection),\\n            USDC,\\n            ONE_DOLLAR,\\n            \\\"\\\",\\n            _caller\\n        );\\n        emit DollarStoreKidsMinted(_caller, _counter);\\n    }\\n\\n    /**\\n     * @notice Burn a DSK and get 1 USDC back\\n     * @param id_ DSK id to burn\\n     */\\n    function burn(uint256 id_) external {\\n        address _caller = _msgSender();\\n        // Transfer DSK here\\n        capsuleCollection.safeTransferFrom(_caller, address(this), id_);\\n        // Burn DSK\\n        CAPSULE_MINTER.burnSingleERC20Capsule(address(capsuleCollection), id_);\\n        // Transfer user Dollar contents (1 USDC)\\n        IERC20(USDC).safeTransfer(_caller, ONE_DOLLAR);\\n        emit DollarStoreKidsBurnt(_caller, id_);\\n    }\\n\\n    /// @dev This function enables this contract to receive ERC721 tokens\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /******************************************************************************\\n     *                            Governor functions                              *\\n     *****************************************************************************/\\n\\n    /// @notice onlyGovernor:: Sweep given token to governor address\\n    function sweep(address _token) external onlyGovernor {\\n        uint256 _amount = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(governor, _amount);\\n    }\\n\\n    /// @notice onlyGovernor:: Toggle minting status of the Dollar Store Kids\\n    function toggleMint() external onlyGovernor {\\n        isMintEnabled = !isMintEnabled;\\n        emit MintToggled(isMintEnabled);\\n    }\\n\\n    /**\\n     * @notice onlyGovernor:: Transfer ownership of the Dollar Store Kids Capsule collection\\n     * @param newOwner_ Address of new owner\\n     */\\n    function transferCollectionOwnership(address newOwner_) external onlyGovernor {\\n        capsuleCollection.transferOwnership(newOwner_);\\n    }\\n\\n    /**\\n     * @notice onlyGovernor:: Transfer metamaster of the Dollar Store Kids Capsule collection\\n     * @param metamaster_ Address of new metamaster\\n     */\\n    function updateMetamaster(address metamaster_) external onlyGovernor {\\n        capsuleCollection.updateTokenURIOwner(metamaster_);\\n    }\\n\\n    /**\\n     * @notice onlyGovernor:: Set the collection baseURI\\n     * @param baseURI_ New baseURI string\\n     */\\n    function updateBaseURI(string memory baseURI_) public onlyGovernor {\\n        capsuleCollection.setBaseURI(baseURI_);\\n    }\\n\\n    /**\\n     * @notice onlyGovernor:: Update royalty receiver and rate in Dollar Store Kids collection\\n     * @param royaltyReceiver_ Address of royalty receiver\\n     * @param royaltyRate_ Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%\\n     */\\n    function updateRoyaltyConfig(address royaltyReceiver_, uint256 royaltyRate_) external onlyGovernor {\\n        capsuleCollection.updateRoyaltyConfig(royaltyReceiver_, royaltyRate_);\\n    }\\n}\\n\",\"keccak256\":\"0x61c4d2af2b410d8875d7354dba656bd75f1cc39b23a985ae2025033c07a0d43e\",\"license\":\"GPLv3\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal onlyInitializing {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current governor.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"invalid proposed governor\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not the proposed governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe23df06c98c5886aedbddfb0278b178a00fd736d273c94cdfe67b65e77ac5ee4\",\"license\":\"MIT\"},\"contracts/interfaces/ICapsule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\ninterface ICapsule is IERC721, IERC2981 {\\n    function mint(address account, string memory _uri) external;\\n\\n    function burn(address owner, uint256 tokenId) external;\\n\\n    // Read functions\\n    function baseURI() external view returns (string memory);\\n\\n    function counter() external view returns (uint256);\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function isCollectionMinter(address _account) external view returns (bool);\\n\\n    function maxId() external view returns (uint256);\\n\\n    function royaltyRate() external view returns (uint256);\\n\\n    function royaltyReceiver() external view returns (address);\\n\\n    function tokenURIOwner() external view returns (address);\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    //     Extra functions compare to original ICapsule interface    ///////////\\n    ////////////////////////////////////////////////////////////////////////////\\n    // Read functions\\n    function owner() external view returns (address);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // Admin functions\\n    function lockCollectionCount(uint256 _nftCount) external;\\n\\n    function setBaseURI(string calldata baseURI_) external;\\n\\n    function setTokenURI(uint256 _tokenId, string memory _newTokenURI) external;\\n\\n    function transferOwnership(address _newOwner) external;\\n\\n    function updateTokenURIOwner(address _newTokenURIOwner) external;\\n\\n    function updateRoyaltyConfig(address _royaltyReceiver, uint256 _royaltyRate) external;\\n}\\n\",\"keccak256\":\"0x5c08c0d20bdb3fd51fc136535f9a5fb8bab65a5df3c9c62cc7b730d9410f1829\",\"license\":\"MIT\"},\"contracts/interfaces/ICapsuleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IGovernable.sol\\\";\\n\\ninterface ICapsuleFactory is IGovernable {\\n    function capsuleCollectionTax() external view returns (uint256);\\n\\n    function capsuleMinter() external view returns (address);\\n\\n    function createCapsuleCollection(\\n        string memory _name,\\n        string memory _symbol,\\n        address _tokenURIOwner,\\n        bool _isCollectionPrivate\\n    ) external payable returns (address);\\n\\n    function getAllCapsuleCollections() external view returns (address[] memory);\\n\\n    function getCapsuleCollectionsOf(address _owner) external view returns (address[] memory);\\n\\n    function getBlacklist() external view returns (address[] memory);\\n\\n    function getWhitelist() external view returns (address[] memory);\\n\\n    function isCapsule(address _capsule) external view returns (bool);\\n\\n    function isBlacklisted(address _user) external view returns (bool);\\n\\n    function isWhitelisted(address _user) external view returns (bool);\\n\\n    function taxCollector() external view returns (address);\\n\\n    //solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    // Special permission functions\\n    function addToWhitelist(address _user) external;\\n\\n    function removeFromWhitelist(address _user) external;\\n\\n    function addToBlacklist(address _user) external;\\n\\n    function removeFromBlacklist(address _user) external;\\n\\n    function flushTaxAmount() external;\\n\\n    function setCapsuleMinter(address _newCapsuleMinter) external;\\n\\n    function updateCapsuleCollectionOwner(address _previousOwner, address _newOwner) external;\\n\\n    function updateCapsuleCollectionTax(uint256 _newTax) external;\\n\\n    function updateTaxCollector(address _newTaxCollector) external;\\n}\\n\",\"keccak256\":\"0x8ba48bce2d9568280fb0c9021051cad0b143a5cc508699506c61428c3df6fc6f\",\"license\":\"MIT\"},\"contracts/interfaces/ICapsuleMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IGovernable.sol\\\";\\n\\ninterface ICapsuleMinter is IGovernable {\\n    struct SingleERC20Capsule {\\n        address tokenAddress;\\n        uint256 tokenAmount;\\n    }\\n\\n    struct MultiERC20Capsule {\\n        address[] tokenAddresses;\\n        uint256[] tokenAmounts;\\n    }\\n\\n    struct SingleERC721Capsule {\\n        address tokenAddress;\\n        uint256 id;\\n    }\\n\\n    struct MultiERC721Capsule {\\n        address[] tokenAddresses;\\n        uint256[] ids;\\n    }\\n\\n    function capsuleMintTax() external view returns (uint256);\\n\\n    function getMintWhitelist() external view returns (address[] memory);\\n\\n    function getCapsuleOwner(address _capsule, uint256 _id) external view returns (address);\\n\\n    function isMintWhitelisted(address _user) external view returns (bool);\\n\\n    function multiERC20Capsule(address _capsule, uint256 _id) external view returns (MultiERC20Capsule memory _data);\\n\\n    function multiERC721Capsule(address _capsule, uint256 _id) external view returns (MultiERC721Capsule memory _data);\\n\\n    function singleERC20Capsule(address _capsule, uint256 _id) external view returns (address _token, uint256 _amount);\\n\\n    function mintSimpleCapsule(\\n        address _capsule,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnSimpleCapsule(address _capsule, uint256 _id) external;\\n\\n    function mintSingleERC20Capsule(\\n        address _capsule,\\n        address _token,\\n        uint256 _amount,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnSingleERC20Capsule(address _capsule, uint256 _id) external;\\n\\n    function mintSingleERC721Capsule(\\n        address _capsule,\\n        address _token,\\n        uint256 _id,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnSingleERC721Capsule(address _capsule, uint256 _id) external;\\n\\n    function mintMultiERC20Capsule(\\n        address _capsule,\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnMultiERC20Capsule(address _capsule, uint256 _id) external;\\n\\n    function mintMultiERC721Capsule(\\n        address _capsule,\\n        address[] memory _tokens,\\n        uint256[] memory _ids,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnMultiERC721Capsule(address _capsule, uint256 _id) external;\\n\\n    // Special permission functions\\n    function addToWhitelist(address _user) external;\\n\\n    function removeFromWhitelist(address _user) external;\\n\\n    function flushTaxAmount() external;\\n\\n    function updateCapsuleMintTax(uint256 _newTax) external;\\n}\\n\",\"keccak256\":\"0x4dc7984ad8fb16298d0a9d5dbca0973b259b2d3273b4c43bc859088cd5c256b0\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0x3d05688a9e5209d0d13d248faa8bda13a6fc10ca4a57099dfc99746e93aae3b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260405162002ea838038062002ea88339818101604052810190620000299190620005ae565b60006200003b620002f360201b60201c565b905080600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d060405160405180910390a350734ced59c19f1f3a9eebd670f746b737acf504d1eb73ffffffffffffffffffffffffffffffffffffffff1663601dcc78343060016040518463ffffffff1660e01b81526004016200012d92919062000712565b60206040518083038185885af11580156200014c573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906200017391906200079a565b73ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620001b781620002fb60201b60201c565b60805173ffffffffffffffffffffffffffffffffffffffff166323249fd9610d056040518263ffffffff1660e01b8152600401620001f6919062000827565b600060405180830381600087803b1580156200021157600080fd5b505af115801562000226573d6000803e3d6000fd5b5050505073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4873ffffffffffffffffffffffffffffffffffffffff1663095ea7b373b8cf4a28da322598fdb78a1406a61b72d6f6b396620f4240610d0561ffff1662000286919062000873565b6040518363ffffffff1660e01b8152600401620002a5929190620008e5565b6020604051808303816000875af1158015620002c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002eb919062000943565b505062000a57565b600033905090565b6200030b620002f360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200039d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200039490620009c5565b60405180910390fd5b60805173ffffffffffffffffffffffffffffffffffffffff166355f804b3826040518263ffffffff1660e01b8152600401620003da919062000a33565b600060405180830381600087803b158015620003f557600080fd5b505af11580156200040a573d6000803e3d6000fd5b5050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200047a826200042f565b810181811067ffffffffffffffff821117156200049c576200049b62000440565b5b80604052505050565b6000620004b162000411565b9050620004bf82826200046f565b919050565b600067ffffffffffffffff821115620004e257620004e162000440565b5b620004ed826200042f565b9050602081019050919050565b60005b838110156200051a578082015181840152602081019050620004fd565b838111156200052a576000848401525b50505050565b6000620005476200054184620004c4565b620004a5565b9050828152602081018484840111156200056657620005656200042a565b5b62000573848285620004fa565b509392505050565b600082601f83011262000593576200059262000425565b5b8151620005a584826020860162000530565b91505092915050565b600060208284031215620005c757620005c66200041b565b5b600082015167ffffffffffffffff811115620005e857620005e762000420565b5b620005f6848285016200057b565b91505092915050565b600082825260208201905092915050565b7f446f6c6c61722053746f7265204b696473000000000000000000000000000000600082015250565b600062000648601183620005ff565b9150620006558262000610565b602082019050919050565b7f44244b0000000000000000000000000000000000000000000000000000000000600082015250565b600062000698600383620005ff565b9150620006a58262000660565b602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620006dd82620006b0565b9050919050565b620006ef81620006d0565b82525050565b60008115159050919050565b6200070c81620006f5565b82525050565b600060808201905081810360008301526200072d8162000639565b90508181036020830152620007428162000689565b9050620007536040830185620006e4565b62000762606083018462000701565b9392505050565b6200077481620006d0565b81146200078057600080fd5b50565b600081519050620007948162000769565b92915050565b600060208284031215620007b357620007b26200041b565b5b6000620007c38482850162000783565b91505092915050565b600061ffff82169050919050565b6000819050919050565b6000819050919050565b60006200080f620008096200080384620007cc565b620007e4565b620007da565b9050919050565b6200082181620007ee565b82525050565b60006020820190506200083e600083018462000816565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200088082620007da565b91506200088d83620007da565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620008c957620008c862000844565b5b828202905092915050565b620008df81620007da565b82525050565b6000604082019050620008fc6000830185620006e4565b6200090b6020830184620008d4565b9392505050565b6200091d81620006f5565b81146200092957600080fd5b50565b6000815190506200093d8162000912565b92915050565b6000602082840312156200095c576200095b6200041b565b5b60006200096c848285016200092c565b91505092915050565b7f6e6f7420676f7665726e6f720000000000000000000000000000000000000000600082015250565b6000620009ad600c83620005ff565b9150620009ba8262000975565b602082019050919050565b60006020820190508181036000830152620009e0816200099e565b9050919050565b600081519050919050565b6000620009ff82620009e7565b62000a0b8185620005ff565b935062000a1d818560208601620004fa565b62000a28816200042f565b840191505092915050565b6000602082019050818103600083015262000a4f8184620009f2565b905092915050565b6080516123fd62000aab6000396000818161064c015281816108220152818161098401528181610a8c01528181610b4b01528181610c4601528181610d2401528181610e4c01526113b801526123fd6000f3fe60806040526004361061011f5760003560e01c806372abd21d116100a0578063b2ba4f9c11610064578063b2ba4f9c146103a2578063b6aa515b146103cd578063d3dd5fe0146103f6578063f3b27bc31461040d578063fce12644146104245761011f565b806372abd21d146102cf578063784e987f146102fa57806389a30271146103255780638d5cdc2614610350578063931688cb146103795761011f565b80631249c58b116100e75780631249c58b14610209578063150b7a0214610213578063346de50a1461025057806342966c681461027b57806358032084146102a45761011f565b806301681a621461012457806304dad9351461014d57806305c427b7146101765780630a398b88146101a15780630c340a24146101de575b600080fd5b34801561013057600080fd5b5061014b600480360381019061014691906117c1565b61044d565b005b34801561015957600080fd5b50610174600480360381019061016f91906117c1565b6105b3565b005b34801561018257600080fd5b5061018b6106d8565b604051610198919061184d565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c391906117c1565b6106f0565b6040516101d59190611883565b60405180910390f35b3480156101ea57600080fd5b506101f3610710565b60405161020091906118ad565b60405180910390f35b610211610736565b005b34801561021f57600080fd5b5061023a60048036038101906102359190611963565b610a56565b6040516102479190611a26565b60405180910390f35b34801561025c57600080fd5b50610265610a6b565b6040516102729190611883565b60405180910390f35b34801561028757600080fd5b506102a2600480360381019061029d9190611a41565b610a7e565b005b3480156102b057600080fd5b506102b9610c44565b6040516102c69190611a8f565b60405180910390f35b3480156102db57600080fd5b506102e4610c68565b6040516102f19190611ac7565b60405180910390f35b34801561030657600080fd5b5061030f610c6e565b60405161031c9190611afe565b60405180910390f35b34801561033157600080fd5b5061033a610c73565b60405161034791906118ad565b60405180910390f35b34801561035c57600080fd5b5061037760048036038101906103729190611b19565b610c8b565b005b34801561038557600080fd5b506103a0600480360381019061039b9190611c9a565b610db3565b005b3480156103ae57600080fd5b506103b7610ed8565b6040516103c49190611d04565b60405180910390f35b3480156103d957600080fd5b506103f460048036038101906103ef91906117c1565b610ef0565b005b34801561040257600080fd5b5061040b61103a565b005b34801561041957600080fd5b50610422611143565b005b34801561043057600080fd5b5061044b600480360381019061044691906117c1565b61131f565b005b610455611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db90611d7c565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161051f91906118ad565b602060405180830381865afa15801561053c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105609190611db1565b90506105af600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff1661144c9092919063ffffffff16565b5050565b6105bb611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064190611d7c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b81526004016106a391906118ad565b600060405180830381600087803b1580156106bd57600080fd5b505af11580156106d1573d6000803e3d6000fd5b5050505050565b734ced59c19f1f3a9eebd670f746b737acf504d1eb81565b60346020528060005260406000206000915054906101000a900460ff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900460ff16610785576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077c90611e2a565b60405180910390fd5b600061078f611444565b9050603460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081590611e96565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361bc221a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190611db1565b9050610d0561ffff1681106108f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f090611f02565b60405180910390fd5b6001603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff166382cd81bc347f000000000000000000000000000000000000000000000000000000000000000073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48620f4240876040518663ffffffff1660e01b81526004016109dc9493929190611f57565b6000604051808303818588803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b5050505050808273ffffffffffffffffffffffffffffffffffffffff167f300d6a868354287e59fa2bf83ed2a511eb48b1d4c37ade589fbb5de6ecd679cd60405160405180910390a35050565b600063150b7a0260e01b905095945050505050565b603360009054906101000a900460ff1681565b6000610a88611444565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e8230856040518463ffffffff1660e01b8152600401610ae793929190611faf565b600060405180830381600087803b158015610b0157600080fd5b505af1158015610b15573d6000803e3d6000fd5b5050505073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff166358ba75ac7f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b8152600401610b88929190611fe6565b600060405180830381600087803b158015610ba257600080fd5b505af1158015610bb6573d6000803e3d6000fd5b50505050610bfc81620f424073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4873ffffffffffffffffffffffffffffffffffffffff1661144c9092919063ffffffff16565b818173ffffffffffffffffffffffffffffffffffffffff167f7cb99e32cc436a43fe66a663f0b2ed66d30d5edd1cf27495e0e3a579b9b2402960405160405180910390a35050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610d0581565b600181565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b610c93611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1990611d7c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d5cdc2683836040518363ffffffff1660e01b8152600401610d7d929190611fe6565b600060405180830381600087803b158015610d9757600080fd5b505af1158015610dab573d6000803e3d6000fd5b505050505050565b610dbb611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4190611d7c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166355f804b3826040518263ffffffff1660e01b8152600401610ea39190612086565b600060405180830381600087803b158015610ebd57600080fd5b505af1158015610ed1573d6000803e3d6000fd5b5050505050565b73b8cf4a28da322598fdb78a1406a61b72d6f6b39681565b610ef8611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7e90611d7c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fed906120f4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611042611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c890611d7c565b60405180910390fd5b603360009054906101000a900460ff1615603360006101000a81548160ff0219169083151502179055507f8ba9af8fef251a59a57bb383a518ff12b3c2770c23cf0ab9a59a9e2390e08f43603360009054906101000a900460ff166040516111399190611883565b60405180910390a1565b61114b611444565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d190612160565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b611327611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ad90611d7c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b86f18c826040518263ffffffff1660e01b815260040161140f91906118ad565b600060405180830381600087803b15801561142957600080fd5b505af115801561143d573d6000803e3d6000fd5b5050505050565b600033905090565b6114cd8363a9059cbb60e01b848460405160240161146b929190611fe6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506114d2565b505050565b6000611534826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115999092919063ffffffff16565b9050600081511115611594578080602001905181019061155491906121ac565b611593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158a9061224b565b60405180910390fd5b5b505050565b60606115a884846000856115b1565b90509392505050565b6060824710156115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed906122dd565b60405180910390fd5b6115ff856116c5565b61163e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163590612349565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161166791906123b0565b60006040518083038185875af1925050503d80600081146116a4576040519150601f19603f3d011682016040523d82523d6000602084013e6116a9565b606091505b50915091506116b98282866116e8565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156116f857829050611748565b60008351111561170b5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173f9190612086565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061178e82611763565b9050919050565b61179e81611783565b81146117a957600080fd5b50565b6000813590506117bb81611795565b92915050565b6000602082840312156117d7576117d6611759565b5b60006117e5848285016117ac565b91505092915050565b6000819050919050565b600061181361180e61180984611763565b6117ee565b611763565b9050919050565b6000611825826117f8565b9050919050565b60006118378261181a565b9050919050565b6118478161182c565b82525050565b6000602082019050611862600083018461183e565b92915050565b60008115159050919050565b61187d81611868565b82525050565b60006020820190506118986000830184611874565b92915050565b6118a781611783565b82525050565b60006020820190506118c2600083018461189e565b92915050565b6000819050919050565b6118db816118c8565b81146118e657600080fd5b50565b6000813590506118f8816118d2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611923576119226118fe565b5b8235905067ffffffffffffffff8111156119405761193f611903565b5b60208301915083600182028301111561195c5761195b611908565b5b9250929050565b60008060008060006080868803121561197f5761197e611759565b5b600061198d888289016117ac565b955050602061199e888289016117ac565b94505060406119af888289016118e9565b935050606086013567ffffffffffffffff8111156119d0576119cf61175e565b5b6119dc8882890161190d565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a20816119eb565b82525050565b6000602082019050611a3b6000830184611a17565b92915050565b600060208284031215611a5757611a56611759565b5b6000611a65848285016118e9565b91505092915050565b6000611a798261181a565b9050919050565b611a8981611a6e565b82525050565b6000602082019050611aa46000830184611a80565b92915050565b600061ffff82169050919050565b611ac181611aaa565b82525050565b6000602082019050611adc6000830184611ab8565b92915050565b600060ff82169050919050565b611af881611ae2565b82525050565b6000602082019050611b136000830184611aef565b92915050565b60008060408385031215611b3057611b2f611759565b5b6000611b3e858286016117ac565b9250506020611b4f858286016118e9565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ba782611b5e565b810181811067ffffffffffffffff82111715611bc657611bc5611b6f565b5b80604052505050565b6000611bd961174f565b9050611be58282611b9e565b919050565b600067ffffffffffffffff821115611c0557611c04611b6f565b5b611c0e82611b5e565b9050602081019050919050565b82818337600083830152505050565b6000611c3d611c3884611bea565b611bcf565b905082815260208101848484011115611c5957611c58611b59565b5b611c64848285611c1b565b509392505050565b600082601f830112611c8157611c806118fe565b5b8135611c91848260208601611c2a565b91505092915050565b600060208284031215611cb057611caf611759565b5b600082013567ffffffffffffffff811115611cce57611ccd61175e565b5b611cda84828501611c6c565b91505092915050565b6000611cee8261181a565b9050919050565b611cfe81611ce3565b82525050565b6000602082019050611d196000830184611cf5565b92915050565b600082825260208201905092915050565b7f6e6f7420676f7665726e6f720000000000000000000000000000000000000000600082015250565b6000611d66600c83611d1f565b9150611d7182611d30565b602082019050919050565b60006020820190508181036000830152611d9581611d59565b9050919050565b600081519050611dab816118d2565b92915050565b600060208284031215611dc757611dc6611759565b5b6000611dd584828501611d9c565b91505092915050565b7f6d696e742d69732d6e6f742d656e61626c656400000000000000000000000000600082015250565b6000611e14601383611d1f565b9150611e1f82611dde565b602082019050919050565b60006020820190508181036000830152611e4381611e07565b9050919050565b7f616c72656164792d6d696e7465642d64736b0000000000000000000000000000600082015250565b6000611e80601283611d1f565b9150611e8b82611e4a565b602082019050919050565b60006020820190508181036000830152611eaf81611e73565b9050919050565b7f6d61782d737570706c792d726561636865640000000000000000000000000000600082015250565b6000611eec601283611d1f565b9150611ef782611eb6565b602082019050919050565b60006020820190508181036000830152611f1b81611edf565b9050919050565b611f2b816118c8565b82525050565b50565b6000611f41600083611d1f565b9150611f4c82611f31565b600082019050919050565b600060a082019050611f6c600083018761189e565b611f79602083018661189e565b611f866040830185611f22565b8181036060830152611f9781611f34565b9050611fa6608083018461189e565b95945050505050565b6000606082019050611fc4600083018661189e565b611fd1602083018561189e565b611fde6040830184611f22565b949350505050565b6000604082019050611ffb600083018561189e565b6120086020830184611f22565b9392505050565b600081519050919050565b60005b8381101561203857808201518184015260208101905061201d565b83811115612047576000848401525b50505050565b60006120588261200f565b6120628185611d1f565b935061207281856020860161201a565b61207b81611b5e565b840191505092915050565b600060208201905081810360008301526120a0818461204d565b905092915050565b7f696e76616c69642070726f706f73656420676f7665726e6f7200000000000000600082015250565b60006120de601983611d1f565b91506120e9826120a8565b602082019050919050565b6000602082019050818103600083015261210d816120d1565b9050919050565b7f6e6f74207468652070726f706f73656420676f7665726e6f7200000000000000600082015250565b600061214a601983611d1f565b915061215582612114565b602082019050919050565b600060208201905081810360008301526121798161213d565b9050919050565b61218981611868565b811461219457600080fd5b50565b6000815190506121a681612180565b92915050565b6000602082840312156121c2576121c1611759565b5b60006121d084828501612197565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612235602a83611d1f565b9150612240826121d9565b604082019050919050565b6000602082019050818103600083015261226481612228565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006122c7602683611d1f565b91506122d28261226b565b604082019050919050565b600060208201905081810360008301526122f6816122ba565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612333601d83611d1f565b915061233e826122fd565b602082019050919050565b6000602082019050818103600083015261236281612326565b9050919050565b600081519050919050565b600081905092915050565b600061238a82612369565b6123948185612374565b93506123a481856020860161201a565b80840191505092915050565b60006123bc828461237f565b91508190509291505056fea2646970667358221220a90575cb176a19c75bf4d7142e0e72bf4892d8e346d3d07b8a28aa1dc503fa4464736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c806372abd21d116100a0578063b2ba4f9c11610064578063b2ba4f9c146103a2578063b6aa515b146103cd578063d3dd5fe0146103f6578063f3b27bc31461040d578063fce12644146104245761011f565b806372abd21d146102cf578063784e987f146102fa57806389a30271146103255780638d5cdc2614610350578063931688cb146103795761011f565b80631249c58b116100e75780631249c58b14610209578063150b7a0214610213578063346de50a1461025057806342966c681461027b57806358032084146102a45761011f565b806301681a621461012457806304dad9351461014d57806305c427b7146101765780630a398b88146101a15780630c340a24146101de575b600080fd5b34801561013057600080fd5b5061014b600480360381019061014691906117c1565b61044d565b005b34801561015957600080fd5b50610174600480360381019061016f91906117c1565b6105b3565b005b34801561018257600080fd5b5061018b6106d8565b604051610198919061184d565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c391906117c1565b6106f0565b6040516101d59190611883565b60405180910390f35b3480156101ea57600080fd5b506101f3610710565b60405161020091906118ad565b60405180910390f35b610211610736565b005b34801561021f57600080fd5b5061023a60048036038101906102359190611963565b610a56565b6040516102479190611a26565b60405180910390f35b34801561025c57600080fd5b50610265610a6b565b6040516102729190611883565b60405180910390f35b34801561028757600080fd5b506102a2600480360381019061029d9190611a41565b610a7e565b005b3480156102b057600080fd5b506102b9610c44565b6040516102c69190611a8f565b60405180910390f35b3480156102db57600080fd5b506102e4610c68565b6040516102f19190611ac7565b60405180910390f35b34801561030657600080fd5b5061030f610c6e565b60405161031c9190611afe565b60405180910390f35b34801561033157600080fd5b5061033a610c73565b60405161034791906118ad565b60405180910390f35b34801561035c57600080fd5b5061037760048036038101906103729190611b19565b610c8b565b005b34801561038557600080fd5b506103a0600480360381019061039b9190611c9a565b610db3565b005b3480156103ae57600080fd5b506103b7610ed8565b6040516103c49190611d04565b60405180910390f35b3480156103d957600080fd5b506103f460048036038101906103ef91906117c1565b610ef0565b005b34801561040257600080fd5b5061040b61103a565b005b34801561041957600080fd5b50610422611143565b005b34801561043057600080fd5b5061044b600480360381019061044691906117c1565b61131f565b005b610455611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db90611d7c565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161051f91906118ad565b602060405180830381865afa15801561053c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105609190611db1565b90506105af600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff1661144c9092919063ffffffff16565b5050565b6105bb611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064190611d7c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b81526004016106a391906118ad565b600060405180830381600087803b1580156106bd57600080fd5b505af11580156106d1573d6000803e3d6000fd5b5050505050565b734ced59c19f1f3a9eebd670f746b737acf504d1eb81565b60346020528060005260406000206000915054906101000a900460ff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900460ff16610785576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077c90611e2a565b60405180910390fd5b600061078f611444565b9050603460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081590611e96565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361bc221a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190611db1565b9050610d0561ffff1681106108f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f090611f02565b60405180910390fd5b6001603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff166382cd81bc347f000000000000000000000000000000000000000000000000000000000000000073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48620f4240876040518663ffffffff1660e01b81526004016109dc9493929190611f57565b6000604051808303818588803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b5050505050808273ffffffffffffffffffffffffffffffffffffffff167f300d6a868354287e59fa2bf83ed2a511eb48b1d4c37ade589fbb5de6ecd679cd60405160405180910390a35050565b600063150b7a0260e01b905095945050505050565b603360009054906101000a900460ff1681565b6000610a88611444565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e8230856040518463ffffffff1660e01b8152600401610ae793929190611faf565b600060405180830381600087803b158015610b0157600080fd5b505af1158015610b15573d6000803e3d6000fd5b5050505073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff166358ba75ac7f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b8152600401610b88929190611fe6565b600060405180830381600087803b158015610ba257600080fd5b505af1158015610bb6573d6000803e3d6000fd5b50505050610bfc81620f424073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4873ffffffffffffffffffffffffffffffffffffffff1661144c9092919063ffffffff16565b818173ffffffffffffffffffffffffffffffffffffffff167f7cb99e32cc436a43fe66a663f0b2ed66d30d5edd1cf27495e0e3a579b9b2402960405160405180910390a35050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610d0581565b600181565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b610c93611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1990611d7c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d5cdc2683836040518363ffffffff1660e01b8152600401610d7d929190611fe6565b600060405180830381600087803b158015610d9757600080fd5b505af1158015610dab573d6000803e3d6000fd5b505050505050565b610dbb611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4190611d7c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166355f804b3826040518263ffffffff1660e01b8152600401610ea39190612086565b600060405180830381600087803b158015610ebd57600080fd5b505af1158015610ed1573d6000803e3d6000fd5b5050505050565b73b8cf4a28da322598fdb78a1406a61b72d6f6b39681565b610ef8611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7e90611d7c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fed906120f4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611042611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c890611d7c565b60405180910390fd5b603360009054906101000a900460ff1615603360006101000a81548160ff0219169083151502179055507f8ba9af8fef251a59a57bb383a518ff12b3c2770c23cf0ab9a59a9e2390e08f43603360009054906101000a900460ff166040516111399190611883565b60405180910390a1565b61114b611444565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d190612160565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b611327611444565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ad90611d7c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b86f18c826040518263ffffffff1660e01b815260040161140f91906118ad565b600060405180830381600087803b15801561142957600080fd5b505af115801561143d573d6000803e3d6000fd5b5050505050565b600033905090565b6114cd8363a9059cbb60e01b848460405160240161146b929190611fe6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506114d2565b505050565b6000611534826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115999092919063ffffffff16565b9050600081511115611594578080602001905181019061155491906121ac565b611593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158a9061224b565b60405180910390fd5b5b505050565b60606115a884846000856115b1565b90509392505050565b6060824710156115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ed906122dd565b60405180910390fd5b6115ff856116c5565b61163e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163590612349565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161166791906123b0565b60006040518083038185875af1925050503d80600081146116a4576040519150601f19603f3d011682016040523d82523d6000602084013e6116a9565b606091505b50915091506116b98282866116e8565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156116f857829050611748565b60008351111561170b5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173f9190612086565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061178e82611763565b9050919050565b61179e81611783565b81146117a957600080fd5b50565b6000813590506117bb81611795565b92915050565b6000602082840312156117d7576117d6611759565b5b60006117e5848285016117ac565b91505092915050565b6000819050919050565b600061181361180e61180984611763565b6117ee565b611763565b9050919050565b6000611825826117f8565b9050919050565b60006118378261181a565b9050919050565b6118478161182c565b82525050565b6000602082019050611862600083018461183e565b92915050565b60008115159050919050565b61187d81611868565b82525050565b60006020820190506118986000830184611874565b92915050565b6118a781611783565b82525050565b60006020820190506118c2600083018461189e565b92915050565b6000819050919050565b6118db816118c8565b81146118e657600080fd5b50565b6000813590506118f8816118d2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611923576119226118fe565b5b8235905067ffffffffffffffff8111156119405761193f611903565b5b60208301915083600182028301111561195c5761195b611908565b5b9250929050565b60008060008060006080868803121561197f5761197e611759565b5b600061198d888289016117ac565b955050602061199e888289016117ac565b94505060406119af888289016118e9565b935050606086013567ffffffffffffffff8111156119d0576119cf61175e565b5b6119dc8882890161190d565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a20816119eb565b82525050565b6000602082019050611a3b6000830184611a17565b92915050565b600060208284031215611a5757611a56611759565b5b6000611a65848285016118e9565b91505092915050565b6000611a798261181a565b9050919050565b611a8981611a6e565b82525050565b6000602082019050611aa46000830184611a80565b92915050565b600061ffff82169050919050565b611ac181611aaa565b82525050565b6000602082019050611adc6000830184611ab8565b92915050565b600060ff82169050919050565b611af881611ae2565b82525050565b6000602082019050611b136000830184611aef565b92915050565b60008060408385031215611b3057611b2f611759565b5b6000611b3e858286016117ac565b9250506020611b4f858286016118e9565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ba782611b5e565b810181811067ffffffffffffffff82111715611bc657611bc5611b6f565b5b80604052505050565b6000611bd961174f565b9050611be58282611b9e565b919050565b600067ffffffffffffffff821115611c0557611c04611b6f565b5b611c0e82611b5e565b9050602081019050919050565b82818337600083830152505050565b6000611c3d611c3884611bea565b611bcf565b905082815260208101848484011115611c5957611c58611b59565b5b611c64848285611c1b565b509392505050565b600082601f830112611c8157611c806118fe565b5b8135611c91848260208601611c2a565b91505092915050565b600060208284031215611cb057611caf611759565b5b600082013567ffffffffffffffff811115611cce57611ccd61175e565b5b611cda84828501611c6c565b91505092915050565b6000611cee8261181a565b9050919050565b611cfe81611ce3565b82525050565b6000602082019050611d196000830184611cf5565b92915050565b600082825260208201905092915050565b7f6e6f7420676f7665726e6f720000000000000000000000000000000000000000600082015250565b6000611d66600c83611d1f565b9150611d7182611d30565b602082019050919050565b60006020820190508181036000830152611d9581611d59565b9050919050565b600081519050611dab816118d2565b92915050565b600060208284031215611dc757611dc6611759565b5b6000611dd584828501611d9c565b91505092915050565b7f6d696e742d69732d6e6f742d656e61626c656400000000000000000000000000600082015250565b6000611e14601383611d1f565b9150611e1f82611dde565b602082019050919050565b60006020820190508181036000830152611e4381611e07565b9050919050565b7f616c72656164792d6d696e7465642d64736b0000000000000000000000000000600082015250565b6000611e80601283611d1f565b9150611e8b82611e4a565b602082019050919050565b60006020820190508181036000830152611eaf81611e73565b9050919050565b7f6d61782d737570706c792d726561636865640000000000000000000000000000600082015250565b6000611eec601283611d1f565b9150611ef782611eb6565b602082019050919050565b60006020820190508181036000830152611f1b81611edf565b9050919050565b611f2b816118c8565b82525050565b50565b6000611f41600083611d1f565b9150611f4c82611f31565b600082019050919050565b600060a082019050611f6c600083018761189e565b611f79602083018661189e565b611f866040830185611f22565b8181036060830152611f9781611f34565b9050611fa6608083018461189e565b95945050505050565b6000606082019050611fc4600083018661189e565b611fd1602083018561189e565b611fde6040830184611f22565b949350505050565b6000604082019050611ffb600083018561189e565b6120086020830184611f22565b9392505050565b600081519050919050565b60005b8381101561203857808201518184015260208101905061201d565b83811115612047576000848401525b50505050565b60006120588261200f565b6120628185611d1f565b935061207281856020860161201a565b61207b81611b5e565b840191505092915050565b600060208201905081810360008301526120a0818461204d565b905092915050565b7f696e76616c69642070726f706f73656420676f7665726e6f7200000000000000600082015250565b60006120de601983611d1f565b91506120e9826120a8565b602082019050919050565b6000602082019050818103600083015261210d816120d1565b9050919050565b7f6e6f74207468652070726f706f73656420676f7665726e6f7200000000000000600082015250565b600061214a601983611d1f565b915061215582612114565b602082019050919050565b600060208201905081810360008301526121798161213d565b9050919050565b61218981611868565b811461219457600080fd5b50565b6000815190506121a681612180565b92915050565b6000602082840312156121c2576121c1611759565b5b60006121d084828501612197565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612235602a83611d1f565b9150612240826121d9565b604082019050919050565b6000602082019050818103600083015261226481612228565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006122c7602683611d1f565b91506122d28261226b565b604082019050919050565b600060208201905081810360008301526122f6816122ba565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612333601d83611d1f565b915061233e826122fd565b602082019050919050565b6000602082019050818103600083015261236281612326565b9050919050565b600081519050919050565b600081905092915050565b600061238a82612369565b6123948185612374565b93506123a481856020860161201a565b80840191505092915050565b60006123bc828461237f565b91508190509291505056fea2646970667358221220a90575cb176a19c75bf4d7142e0e72bf4892d8e346d3d07b8a28aa1dc503fa4464736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "burn(uint256)": {
        "params": {
          "id_": "DSK id to burn"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "This function enables this contract to receive ERC721 tokens"
      },
      "transferCollectionOwnership(address)": {
        "params": {
          "newOwner_": "Address of new owner"
        }
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current governor."
      },
      "updateBaseURI(string)": {
        "params": {
          "baseURI_": "New baseURI string"
        }
      },
      "updateMetamaster(address)": {
        "params": {
          "metamaster_": "Address of new metamaster"
        }
      },
      "updateRoyaltyConfig(address,uint256)": {
        "params": {
          "royaltyRate_": "Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%",
          "royaltyReceiver_": "Address of royalty receiver"
        }
      }
    },
    "title": "Dollar Store Kids",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAX_DSK()": {
        "notice": "Max amount of Dollar Store Kids to release"
      },
      "MINT_PER_ADDRESS()": {
        "notice": "Allowed Dollar Store Kids mints per address"
      },
      "USDC()": {
        "notice": "Input token for the Dollar Store Kids"
      },
      "alreadyMinted(address)": {
        "notice": "Mapping of addresses who have minted."
      },
      "burn(uint256)": {
        "notice": "Burn a DSK and get 1 USDC back"
      },
      "capsuleCollection()": {
        "notice": "Dollar Store Kids collection"
      },
      "isMintEnabled()": {
        "notice": "Flag indicating whether the Dollar Store Kids mint is enabled."
      },
      "mint()": {
        "notice": "Mint a DSK to caller address"
      },
      "sweep(address)": {
        "notice": "onlyGovernor:: Sweep given token to governor address"
      },
      "toggleMint()": {
        "notice": "onlyGovernor:: Toggle minting status of the Dollar Store Kids"
      },
      "transferCollectionOwnership(address)": {
        "notice": "onlyGovernor:: Transfer ownership of the Dollar Store Kids Capsule collection"
      },
      "updateBaseURI(string)": {
        "notice": "onlyGovernor:: Set the collection baseURI"
      },
      "updateMetamaster(address)": {
        "notice": "onlyGovernor:: Transfer metamaster of the Dollar Store Kids Capsule collection"
      },
      "updateRoyaltyConfig(address,uint256)": {
        "notice": "onlyGovernor:: Update royalty receiver and rate in Dollar Store Kids collection"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/DollarStoreKids.sol:DollarStoreKids",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 28,
        "contract": "contracts/DollarStoreKids.sol:DollarStoreKids",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1625,
        "contract": "contracts/DollarStoreKids.sol:DollarStoreKids",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1627,
        "contract": "contracts/DollarStoreKids.sol:DollarStoreKids",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1749,
        "contract": "contracts/DollarStoreKids.sol:DollarStoreKids",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1303,
        "contract": "contracts/DollarStoreKids.sol:DollarStoreKids",
        "label": "isMintEnabled",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 1308,
        "contract": "contracts/DollarStoreKids.sol:DollarStoreKids",
        "label": "alreadyMinted",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}