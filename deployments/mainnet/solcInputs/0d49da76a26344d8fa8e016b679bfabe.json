{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/access/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../interfaces/IGovernable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (governor) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the governor account will be the one that deploys the contract. This\n * can later be changed with {transferGovernorship}.\n *\n */\nabstract contract Governable is IGovernable, Context, Initializable {\n    address public governor;\n    address private proposedGovernor;\n\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial governor.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial governor.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __Governable_init() internal onlyInitializing {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governor.\n     */\n    modifier onlyGovernor() {\n        require(governor == _msgSender(), \"not governor\");\n        _;\n    }\n\n    /**\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\n     * Can only be called by the current governor.\n     */\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\n        require(_proposedGovernor != address(0), \"invalid proposed governor\");\n        proposedGovernor = _proposedGovernor;\n    }\n\n    /**\n     * @dev Allows new governor to accept governorship of the contract.\n     */\n    function acceptGovernorship() external {\n        require(proposedGovernor == _msgSender(), \"not the proposed governor\");\n        emit UpdatedGovernor(governor, proposedGovernor);\n        governor = proposedGovernor;\n        proposedGovernor = address(0);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/DollarStoreKids.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./access/Governable.sol\";\nimport \"./interfaces/ICapsule.sol\";\nimport \"./interfaces/ICapsuleFactory.sol\";\nimport \"./interfaces/ICapsuleMinter.sol\";\n\n/// @title Dollar Store Kids\ncontract DollarStoreKids is Governable, IERC721Receiver {\n    using SafeERC20 for IERC20;\n\n    /// @notice Input token for the Dollar Store Kids\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    ICapsuleFactory public constant CAPSULE_FACTORY = ICapsuleFactory(0x4Ced59c19F1f3a9EeBD670f746B737ACf504d1eB);\n    ICapsuleMinter public constant CAPSULE_MINTER = ICapsuleMinter(0xb8Cf4A28DA322598FDB78a1406a61B72d6F6b396);\n    /// @notice Allowed Dollar Store Kids mints per address\n    uint8 public constant MINT_PER_ADDRESS = 1;\n    /// @notice Max amount of Dollar Store Kids to release\n    uint16 public constant MAX_DSK = 3333;\n\n    /// @notice Dollar Store Kids collection\n    ICapsule public immutable capsuleCollection;\n    /// @notice Flag indicating whether the Dollar Store Kids mint is enabled.\n    bool public isMintEnabled;\n    /// @notice Mapping of addresses who have minted.\n    mapping(address => bool) public alreadyMinted;\n\n    uint256 private constant ONE_DOLLAR = 1e6; // 1 USDC\n\n    event DollarStoreKidsMinted(address indexed user, uint256 indexed id);\n    event DollarStoreKidsBurnt(address indexed user, uint256 indexed id);\n    event MintToggled(bool mintStatus);\n\n    constructor(string memory baseURI_) payable {\n        capsuleCollection = ICapsule(\n            CAPSULE_FACTORY.createCapsuleCollection{value: msg.value}(\"Dollar Store Kids\", \"D$K\", address(this), true)\n        );\n        updateBaseURI(baseURI_);\n        capsuleCollection.lockCollectionCount(MAX_DSK);\n        // Using approve as USDC is ERC20 compliant token\n        IERC20(USDC).approve(address(CAPSULE_MINTER), MAX_DSK * ONE_DOLLAR);\n    }\n\n    /// @notice Mint a DSK to caller address\n    function mint() external payable {\n        require(isMintEnabled, \"mint-is-not-enabled\");\n        address _caller = _msgSender();\n        require(!alreadyMinted[_caller], \"already-minted-dsk\");\n\n        uint256 _counter = capsuleCollection.counter();\n        require(_counter < MAX_DSK, \"max-supply-reached\");\n        // Each address is allowed to mint a max of 1 DSK - update state\n        alreadyMinted[_caller] = true;\n\n        // DSK collection will be using baseURL and do not need URI for individual NFTs.\n        // Hence passing empty token URI to mint function below.\n        CAPSULE_MINTER.mintSingleERC20Capsule{value: msg.value}(\n            address(capsuleCollection),\n            USDC,\n            ONE_DOLLAR,\n            \"\",\n            _caller\n        );\n        emit DollarStoreKidsMinted(_caller, _counter);\n    }\n\n    /**\n     * @notice Burn a DSK and get 1 USDC back\n     * @param id_ DSK id to burn\n     */\n    function burn(uint256 id_) external {\n        address _caller = _msgSender();\n        // Transfer DSK here\n        capsuleCollection.safeTransferFrom(_caller, address(this), id_);\n        // Burn DSK\n        CAPSULE_MINTER.burnSingleERC20Capsule(address(capsuleCollection), id_);\n        // Transfer user Dollar contents (1 USDC)\n        IERC20(USDC).safeTransfer(_caller, ONE_DOLLAR);\n        emit DollarStoreKidsBurnt(_caller, id_);\n    }\n\n    /// @dev This function enables this contract to receive ERC721 tokens\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    /******************************************************************************\n     *                            Governor functions                              *\n     *****************************************************************************/\n\n    /// @notice onlyGovernor:: Sweep given token to governor address\n    function sweep(address _token) external onlyGovernor {\n        uint256 _amount = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransfer(governor, _amount);\n    }\n\n    /// @notice onlyGovernor:: Toggle minting status of the Dollar Store Kids\n    function toggleMint() external onlyGovernor {\n        isMintEnabled = !isMintEnabled;\n        emit MintToggled(isMintEnabled);\n    }\n\n    /**\n     * @notice onlyGovernor:: Transfer ownership of the Dollar Store Kids Capsule collection\n     * @param newOwner_ Address of new owner\n     */\n    function transferCollectionOwnership(address newOwner_) external onlyGovernor {\n        capsuleCollection.transferOwnership(newOwner_);\n    }\n\n    /**\n     * @notice onlyGovernor:: Transfer metamaster of the Dollar Store Kids Capsule collection\n     * @param metamaster_ Address of new metamaster\n     */\n    function updateMetamaster(address metamaster_) external onlyGovernor {\n        capsuleCollection.updateTokenURIOwner(metamaster_);\n    }\n\n    /**\n     * @notice onlyGovernor:: Set the collection baseURI\n     * @param baseURI_ New baseURI string\n     */\n    function updateBaseURI(string memory baseURI_) public onlyGovernor {\n        capsuleCollection.setBaseURI(baseURI_);\n    }\n\n    /**\n     * @notice onlyGovernor:: Update royalty receiver and rate in Dollar Store Kids collection\n     * @param royaltyReceiver_ Address of royalty receiver\n     * @param royaltyRate_ Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%\n     */\n    function updateRoyaltyConfig(address royaltyReceiver_, uint256 royaltyRate_) external onlyGovernor {\n        capsuleCollection.updateRoyaltyConfig(royaltyReceiver_, royaltyRate_);\n    }\n}\n"
    },
    "contracts/DollarStoreKidsV2.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"./access/Governable.sol\";\nimport \"./interfaces/ICapsule.sol\";\nimport \"./interfaces/ICapsuleMinter.sol\";\n\n/// @title Dollar Store Kids\ncontract DollarStoreKidsV2 is Governable, IERC721Receiver {\n    using SafeERC20 for IERC20;\n    string public constant VERSION = \"2.0.0\";\n\n    /// @notice Input token for the Dollar Store Kids\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    ICapsuleMinter public constant CAPSULE_MINTER = ICapsuleMinter(0xb8Cf4A28DA322598FDB78a1406a61B72d6F6b396);\n    /// @notice Allowed Dollar Store Kids mints per address\n    uint8 public constant MINT_PER_ADDRESS = 1;\n    /// @notice Max amount of Dollar Store Kids to release\n    uint16 public constant MAX_DSK = 3333;\n\n    /// @notice Dollar Store Kids collection\n    ICapsule public immutable capsuleCollection;\n    /// @notice Flag indicating whether the Dollar Store Kids mint is enabled.\n    bool public isMintEnabled;\n    /// @notice Mapping of addresses who have minted.\n    mapping(address => bool) public alreadyMinted;\n\n    uint256 private constant ONE_DOLLAR = 1e6; // 1 USDC\n\n    event DollarStoreKidsMinted(address indexed user, uint256 indexed id);\n    event DollarStoreKidsBurnt(address indexed user, uint256 indexed id);\n    event MintToggled(bool mintStatus);\n\n    constructor(address dskCollection_) {\n        require(dskCollection_ != address(0), \"dsk-collection-is-null\");\n        capsuleCollection = ICapsule(dskCollection_);\n    }\n\n    /// @notice Mint a DSK to caller address\n    /// @dev This contract should be listed as whitelistedCallers in Capsule Minter\n    function mint() external payable {\n        require(isMintEnabled, \"mint-is-not-enabled\");\n        address _caller = _msgSender();\n        require(!alreadyMinted[_caller], \"already-minted-dsk\");\n\n        uint256 _counter = capsuleCollection.counter();\n        require(_counter < MAX_DSK, \"max-supply-reached\");\n        // Each address is allowed to mint a max of 1 DSK - update state\n        alreadyMinted[_caller] = true;\n\n        // WhitelistedCallers are required to send tokens before mint.\n        IERC20(USDC).transfer(address(CAPSULE_MINTER), ONE_DOLLAR);\n\n        // DSK collection will be using baseURL and do not need URI for individual NFTs.\n        // Hence passing empty token URI to mint function below.\n        CAPSULE_MINTER.mintSingleERC20Capsule{value: msg.value}(\n            address(capsuleCollection),\n            USDC,\n            ONE_DOLLAR,\n            \"\",\n            _caller\n        );\n        emit DollarStoreKidsMinted(_caller, _counter);\n    }\n\n    /**\n     * @notice Burn a DSK and get 1 USDC back\n     * @param id_ DSK id to burn\n     * @dev Below burn function will only work if this contract is added as\n     * whitelistedCallers in CapsuleMinter.\n     */\n    function burn(uint256 id_) external {\n        address _caller = _msgSender();\n        // Burn DSK\n        CAPSULE_MINTER.burnSingleERC20Capsule(address(capsuleCollection), id_, _caller, _caller);\n        emit DollarStoreKidsBurnt(_caller, id_);\n    }\n\n    /// @dev This function enables this contract to receive ERC721 tokens\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    /******************************************************************************\n     *                            Governor functions                              *\n     *****************************************************************************/\n\n    /// @notice onlyGovernor:: Sweep given token to governor address\n    function sweep(address _token) external onlyGovernor {\n        uint256 _amount = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransfer(governor, _amount);\n    }\n\n    /// @notice onlyGovernor:: Toggle minting status of the Dollar Store Kids\n    function toggleMint() external onlyGovernor {\n        isMintEnabled = !isMintEnabled;\n        emit MintToggled(isMintEnabled);\n    }\n\n    /**\n     * @notice onlyGovernor:: Transfer ownership of the Dollar Store Kids Capsule collection\n     * @param newOwner_ Address of new owner\n     */\n    function transferCollectionOwnership(address newOwner_) external onlyGovernor {\n        capsuleCollection.transferOwnership(newOwner_);\n    }\n\n    /**\n     * @notice onlyGovernor:: Set the collection baseURI\n     * @param baseURI_ New baseURI string\n     */\n    function updateBaseURI(string memory baseURI_) public onlyGovernor {\n        capsuleCollection.setBaseURI(baseURI_);\n    }\n\n    /**\n     * @notice Update collection burner. Add self address as collection burner for DSK\n     */\n    function claimCollectionBurnerRole() external onlyGovernor {\n        CAPSULE_MINTER.factory().updateCapsuleCollectionBurner(address(capsuleCollection), address(this));\n    }\n\n    /**\n     * @notice onlyGovernor:: Transfer metamaster of the Dollar Store Kids Capsule collection\n     * @param metamaster_ Address of new metamaster\n     */\n    function updateMetamaster(address metamaster_) external onlyGovernor {\n        capsuleCollection.updateTokenURIOwner(metamaster_);\n    }\n\n    /**\n     * @notice onlyGovernor:: Update royalty receiver and rate in Dollar Store Kids collection\n     * @param royaltyReceiver_ Address of royalty receiver\n     * @param royaltyRate_ Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%\n     */\n    function updateRoyaltyConfig(address royaltyReceiver_, uint256 royaltyRate_) external onlyGovernor {\n        capsuleCollection.updateRoyaltyConfig(royaltyReceiver_, royaltyRate_);\n    }\n}\n"
    },
    "contracts/interfaces/ICapsule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\ninterface ICapsule is IERC721, IERC2981 {\n    function mint(address account, string memory _uri) external;\n\n    function burn(address owner, uint256 tokenId) external;\n\n    function setMetadataProvider(address _metadataAddress) external;\n\n    // Read functions\n    function baseURI() external view returns (string memory);\n\n    function counter() external view returns (uint256);\n\n    function exists(uint256 tokenId) external view returns (bool);\n\n    function isCollectionMinter(address _account) external view returns (bool);\n\n    function isCollectionPrivate() external view returns (bool);\n\n    function maxId() external view returns (uint256);\n\n    function royaltyRate() external view returns (uint256);\n\n    function royaltyReceiver() external view returns (address);\n\n    function tokenURIOwner() external view returns (address);\n\n    ////////////////////////////////////////////////////////////////////////////\n    //     Extra functions compare to original ICapsule interface    ///////////\n    ////////////////////////////////////////////////////////////////////////////\n    // Read functions\n    function owner() external view returns (address);\n\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // Admin functions\n    function lockCollectionCount(uint256 _nftCount) external;\n\n    function setBaseURI(string calldata baseURI_) external;\n\n    function setTokenURI(uint256 _tokenId, string memory _newTokenURI) external;\n\n    function transferOwnership(address _newOwner) external;\n\n    function updateTokenURIOwner(address _newTokenURIOwner) external;\n\n    function updateRoyaltyConfig(address _royaltyReceiver, uint256 _royaltyRate) external;\n}\n"
    },
    "contracts/interfaces/ICapsuleFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./IGovernable.sol\";\n\ninterface ICapsuleFactory is IGovernable {\n    function capsuleCollectionTax() external view returns (uint256);\n\n    function capsuleMinter() external view returns (address);\n\n    function createCapsuleCollection(\n        string memory _name,\n        string memory _symbol,\n        address _tokenURIOwner,\n        bool _isCollectionPrivate\n    ) external payable returns (address);\n\n    function collectionBurner(address _capsule) external view returns (address);\n\n    function getAllCapsuleCollections() external view returns (address[] memory);\n\n    function getCapsuleCollectionsOf(address _owner) external view returns (address[] memory);\n\n    function getBlacklist() external view returns (address[] memory);\n\n    function getWhitelist() external view returns (address[] memory);\n\n    function isBlacklisted(address _user) external view returns (bool);\n\n    function isCapsule(address _capsule) external view returns (bool);\n\n    function isCollectionBurner(address _capsuleCollection, address _account) external view returns (bool);\n\n    function isWhitelisted(address _user) external view returns (bool);\n\n    function taxCollector() external view returns (address);\n\n    //solhint-disable-next-line func-name-mixedcase\n    function VERSION() external view returns (string memory);\n\n    // Special permission functions\n    function addToWhitelist(address _user) external;\n\n    function removeFromWhitelist(address _user) external;\n\n    function addToBlacklist(address _user) external;\n\n    function removeFromBlacklist(address _user) external;\n\n    function flushTaxAmount() external;\n\n    function setCapsuleMinter(address _newCapsuleMinter) external;\n\n    function updateCapsuleCollectionBurner(address _capsuleCollection, address _newBurner) external;\n\n    function updateCapsuleCollectionOwner(address _previousOwner, address _newOwner) external;\n\n    function updateCapsuleCollectionTax(uint256 _newTax) external;\n\n    function updateTaxCollector(address _newTaxCollector) external;\n}\n"
    },
    "contracts/interfaces/ICapsuleMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./IGovernable.sol\";\nimport \"./ICapsuleFactory.sol\";\n\ninterface ICapsuleMinter is IGovernable {\n    struct SingleERC20Capsule {\n        address tokenAddress;\n        uint256 tokenAmount;\n    }\n\n    struct MultiERC20Capsule {\n        address[] tokenAddresses;\n        uint256[] tokenAmounts;\n    }\n\n    struct SingleERC721Capsule {\n        address tokenAddress;\n        uint256 id;\n    }\n\n    struct MultiERC721Capsule {\n        address[] tokenAddresses;\n        uint256[] ids;\n    }\n\n    struct MultiERC1155Capsule {\n        address[] tokenAddresses;\n        uint256[] ids;\n        uint256[] tokenAmounts;\n    }\n\n    function capsuleMintTax() external view returns (uint256);\n\n    function factory() external view returns (ICapsuleFactory);\n\n    function getMintWhitelist() external view returns (address[] memory);\n\n    function getCapsuleOwner(address _capsule, uint256 _id) external view returns (address);\n\n    function getWhitelistedCallers() external view returns (address[] memory);\n\n    function isMintWhitelisted(address _user) external view returns (bool);\n\n    function isWhitelistedCaller(address _caller) external view returns (bool);\n\n    function multiERC20Capsule(address _capsule, uint256 _id) external view returns (MultiERC20Capsule memory _data);\n\n    function multiERC721Capsule(address _capsule, uint256 _id) external view returns (MultiERC721Capsule memory _data);\n\n    function multiERC1155Capsule(\n        address _capsule,\n        uint256 _id\n    ) external view returns (MultiERC1155Capsule memory _data);\n\n    function singleERC20Capsule(address _capsule, uint256 _id) external view returns (address _token, uint256 _amount);\n\n    function mintSimpleCapsule(address _capsule, string memory _uri, address _receiver) external payable;\n\n    function burnSimpleCapsule(address _capsule, uint256 _id, address _burnFrom) external;\n\n    function mintSingleERC20Capsule(\n        address _capsule,\n        address _token,\n        uint256 _amount,\n        string memory _uri,\n        address _receiver\n    ) external payable;\n\n    // @dev Legacy burn function\n    function burnSingleERC20Capsule(address _capsule, uint256 _id) external;\n\n    function burnSingleERC20Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\n\n    function mintSingleERC721Capsule(\n        address _capsule,\n        address _token,\n        uint256 _id,\n        string memory _uri,\n        address _receiver\n    ) external payable;\n\n    function burnSingleERC721Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\n\n    function mintMultiERC20Capsule(\n        address _capsule,\n        address[] memory _tokens,\n        uint256[] memory _amounts,\n        string memory _uri,\n        address _receiver\n    ) external payable;\n\n    function burnMultiERC20Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\n\n    function mintMultiERC721Capsule(\n        address _capsule,\n        address[] memory _tokens,\n        uint256[] memory _ids,\n        string memory _uri,\n        address _receiver\n    ) external payable;\n\n    function burnMultiERC721Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\n\n    function mintMultiERC1155Capsule(\n        address _capsule,\n        address[] memory _tokens,\n        uint256[] memory _ids,\n        uint256[] memory _amounts,\n        string memory _uri,\n        address _receiver\n    ) external payable;\n\n    function burnMultiERC1155Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\n\n    // Special permission functions\n    function addToWhitelist(address _user) external;\n\n    function removeFromWhitelist(address _user) external;\n\n    function flushTaxAmount() external;\n\n    function updateCapsuleMintTax(uint256 _newTax) external;\n\n    function updateWhitelistedCallers(address _caller) external;\n}\n"
    },
    "contracts/interfaces/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\n/**\n * @notice Governable interface\n */\ninterface IGovernable {\n    function governor() external view returns (address _governor);\n\n    function transferGovernorship(address _proposedGovernor) external;\n}\n"
    }
  },
  "settings": {
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}